<Project Sdk="Microsoft.NET.Sdk.Web">
  <Import Project="../../build/SrcCommon.props" />

  <PropertyGroup>
    <TargetFramework>$(TgsFrameworkVersion)</TargetFramework>
    <Version>$(TgsCoreVersion)</Version>
    <IncludeOpenAPIAnalyzers>true</IncludeOpenAPIAnalyzers>
    <UseAppHost>false</UseAppHost>
    <NoWarn>API1000;ASP0019</NoWarn>
    <NodeModulesFolder>ClientApp/node_modules</NodeModulesFolder>
    <NpmInstallStampFile>ClientApp/node_modules/.install-stamp</NpmInstallStampFile>
    <Nullable>enable</Nullable>
    <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
    <DockerfileContext>..\..</DockerfileContext>
    <ApplicationManifest>../../build/uac_elevation_manifest.xml</ApplicationManifest>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>$(DefineConstants);WATCHDOG_FREE_RESTART</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TGS_HOST_NO_WEBPANEL)' == 'true'">
    <DefineConstants>$(DefineConstants);NO_WEBPANEL</DefineConstants>
  </PropertyGroup>

  <Target Condition="'$(TGS_HOST_NO_WEBPANEL)' != 'true'" Name="ClientInstall" BeforeTargets="ResolveAssemblyReferences" Inputs="../../build/WebpanelVersion.props" Outputs="$(NpmInstallStampFile)">
    <Message Text="Pulling web control panel..." Importance="high" />
    <RemoveDir Directories="ClientApp" />
    <Exec Command="git clone https://github.com/tgstation/tgstation-server-webpanel --branch v$(TgsWebpanelVersion) --depth 1 ClientApp" />
    <RemoveDir Directories="ClientApp/.git" /> <!-- Allows git clean to clean it out -->
    <Message Text="Restoring yarn packages..." Importance="high" />
    <Exec WorkingDirectory="ClientApp" Command="yarn install --immutable" />
    <Touch Files="$(NpmInstallStampFile)" AlwaysCreate="true" />
  </Target>

  <Target Condition="'$(TGS_HOST_NO_WEBPANEL)' != 'true'" Name="NpmBuild" BeforeTargets="BeforeBuild" DependsOnTargets="ClientInstall" Inputs="../../build/WebpanelVersion.props" Outputs="wwwroot\index.html">
    <Message Text="Building web control panel..." Importance="high" />
    <Exec WorkingDirectory="ClientApp" Command="yarn run msbuild" />
  </Target>

  <Target Name="ExportGraphQLApiSchema" AfterTargets="AfterBuild" Outputs="../../artifacts/tgs-api.graphql">
    <Message Text="Exporting GraphQL API Schema..." Importance="high" />
    <Exec Command="dotnet $(TargetPath)" EnvironmentVariables="General__SetupWizardMode=Never;Internal__DumpGraphQLApiPath=../../artifacts/tgs-api.graphql;Internal__EnableGraphQL=true" />
  </Target>

  <Target Name="NpmClean" AfterTargets="Clean">
    <Message Text="Cleaning web control panel..." Importance="high" />
    <RemoveDir Directories="wwwroot" />
  </Target>

  <Target Name="ApplyMasterVersionsAttribute" BeforeTargets="CoreCompile">
    <ItemGroup>
      <MasterVersionAssemblyAttributes Include="Tgstation.Server.Host.Properties.MasterVersionsAttribute">
        <_Parameter1>$(TgsConfigVersion)</_Parameter1>
        <_Parameter2>$(TgsInteropVersion)</_Parameter2>
        <_Parameter3>$(TgsWebpanelVersion)</_Parameter3>
        <_Parameter4>$(TgsHostWatchdogVersion)</_Parameter4>
        <_Parameter5>$(TgsMariaDBRedistVersion)</_Parameter5>
        <_Parameter6>$(TgsSwarmProtocolVersion)</_Parameter6>
        <_Parameter7>$(TgsGraphQLVersion)</_Parameter7>
      </MasterVersionAssemblyAttributes>
    </ItemGroup>
    <WriteCodeFragment AssemblyAttributes="@(MasterVersionAssemblyAttributes)" Language="C#" OutputDirectory="$(IntermediateOutputPath)" OutputFile="MasterVersionsAssemblyInfo.cs">
      <Output TaskParameter="OutputFile" ItemName="Compile" />
      <Output TaskParameter="OutputFile" ItemName="FileWrites" />
    </WriteCodeFragment>
  </Target>

  <Target Condition="'$(TGS_TELEMETRY_KEY_FILE)' != ''" Name="ApplyTelemetryAppSerializedKey" BeforeTargets="CoreCompile">
    <Error Condition="!Exists('$(TGS_TELEMETRY_KEY_FILE)')" Text="TGS_TELEMETRY_KEY_FILE set but does not exist!" />
    <ReadLinesFromFile File="$(TGS_TELEMETRY_KEY_FILE)">
        <Output TaskParameter="Lines" ItemName="SerializedTelemetryKey" />
    </ReadLinesFromFile>
    <ItemGroup>
      <TelemetryAppSerializedKeyAssemblyAttributes Include="Tgstation.Server.Host.Properties.TelemetryAppSerializedKeyAttribute">
        <_Parameter1>@(SerializedTelemetryKey)</_Parameter1>
      </TelemetryAppSerializedKeyAssemblyAttributes>
    </ItemGroup>
    <WriteCodeFragment AssemblyAttributes="@(TelemetryAppSerializedKeyAssemblyAttributes)" Language="C#" OutputDirectory="$(IntermediateOutputPath)" OutputFile="TelemetryAppSerializedKeyAssemblyInfo.cs">
      <Output TaskParameter="OutputFile" ItemName="Compile" />
      <Output TaskParameter="OutputFile" ItemName="FileWrites" />
    </WriteCodeFragment>
  </Target>

  <Target Condition="'$(TGS_TELEMETRY_KEY_FILE)' == '' And '$(CI)' != ''" Name="FailBuildInCIWithoutTelemetryKey" BeforeTargets="CoreCompile">
    <Error Text="The TGS_TELEMETRY_KEY_FILE environment variable should be set in CI!" />
  </Target>

  <ItemGroup>
    <!-- Usage: Concise throw statements for native Win32 errors -->
    <PackageReference Include="BetterWin32Errors" Version="0.2.0" />
    <!-- Usage: Interop with BYOND's /world/Topic -->
    <PackageReference Include="Byond.TopicSender" Version="8.0.1" />
    <!-- Usage: 503'ing request pipeline until server is finished initializing -->
    <PackageReference Include="Cyberboss.AspNetCore.AsyncInitializer" Version="1.2.0" />
    <!-- Usage: IRC interop -->
    <PackageReference Include="Cyberboss.SmartIrc4net.Standard" Version="0.4.7" />
    <!-- Usage: .env file parsing -->
    <PackageReference Include="DotEnv.Core" Version="3.1.0" />
    <!-- Usage: Text formatter for Elasticsearch logging plugin -->
    <PackageReference Include="Elastic.CommonSchema.Serilog" Version="8.12.1" />
    <!-- Usage: GitLab interop -->
    <PackageReference Include="GitLabApiClient" Version="1.8.0" />
    <!-- Usage: GraphQL API Engine -->
    <PackageReference Include="HotChocolate.AspNetCore" Version="14.0.0-rc.3.4" />
    <!-- Usage: GraphQL Authorization Plugin -->
    <PackageReference Include="HotChocolate.AspNetCore.Authorization" Version="14.0.0-rc.3.4" />
    <!-- Usage: GraphQL IDatabaseContext support -->
    <PackageReference Include="HotChocolate.Data.EntityFramework" Version="14.0.0-rc.3.4" />
    <!-- Usage: DataLoader source generation -->
    <PackageReference Include="HotChocolate.Types.Analyzers" Version="14.0.0-rc.3.4" />
    <!-- Usage: GraphQL additional scalar type definitions -->
    <PackageReference Include="HotChocolate.Types.Scalars" Version="14.0.0-rc.3.4" />
    <!-- Usage: git interop -->
    <PackageReference Include="LibGit2Sharp" Version="0.30.0" />
    <!-- Usage: Support ""legacy"" Newotonsoft.Json in HTTP pipeline. The rest of our codebase uses Newtonsoft. -->
    <PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="8.0.10" />
    <!-- Usage: Using target JSON serializer for API -->
    <PackageReference Include="Microsoft.AspNetCore.SignalR.Protocols.NewtonsoftJson" Version="8.0.10" />
    <!-- Usage: Generating dumps of dotnet engine processes -->
    <PackageReference Include="Microsoft.Diagnostics.NETCore.Client" Version="0.2.547301" />
    <!-- Usage: Database ORM -->
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.10" />
    <!-- Usage: Automatic migration generation using command line -->
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.10">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <!-- Usage: Sqlite ORM plugin -->
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="8.0.10" />
    <!-- Usage: MSSQL ORM plugin -->
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="8.0.10" />
    <!-- Usage: POSIX support for syscalls, signals, and symlinks -->
    <PackageReference Include="Mono.Posix.NETStandard" Version="1.0.0" />
    <!-- Usage: Cron string parsing -->
    <PackageReference Include="NCrontab.Signed" Version="3.3.3" />
    <!-- Usage: YAML config plugin -->
    <PackageReference Include="NetEscapades.Configuration.Yaml" Version="3.1.0" />
    <!-- Usage: PostgresSQL ORM plugin -->
    <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="8.0.8" />
    <!-- Usage: MYSQL/MariaDB ORM plugin -->
    <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="8.0.2" />
    <!-- Usage: Discord interop -->
    <PackageReference Include="Remora.Discord" Version="2024.3.0" />
    <!-- Usage: Rich logger builder -->
    <PackageReference Include="Serilog.Extensions.Logging" Version="8.0.0" />
    <!-- Usage: Async logging plugin -->
    <PackageReference Include="Serilog.Sinks.Async" Version="2.0.0" />
    <!-- Usage: Console logging plugin -->
    <PackageReference Include="Serilog.Sinks.Console" Version="6.0.0" />
    <!-- Usage: Elasticsearch logging plugin -->
    <PackageReference Include="Serilog.Sinks.Elasticsearch" Version="10.0.0" />
    <!-- Usage: File logging plugin -->
    <PackageReference Include="Serilog.Sinks.File" Version="6.0.0" />
    <!-- Usage: OpenAPI spec generator -->
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.9.0" />
    <!-- Usage: Newtonsoft.Json plugin for OpenAPI spec generator -->
    <PackageReference Include="Swashbuckle.AspNetCore.Newtonsoft" Version="6.9.0" />
    <!-- Usage: Windows authentication plugin allowing searching for users by name -->
    <PackageReference Include="System.DirectoryServices.AccountManagement" Version="8.0.1" />
    <!-- Usage: Identifying owning user of Windows Process objects -->
    <PackageReference Include="System.Management" Version="8.0.0" />
    <!-- Usage: Temporary resolution to compatibility issues with EFCore 7 and .NET 8 -->
    <PackageReference Include="System.Security.Permissions" Version="8.0.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Tgstation.Server.Api\Tgstation.Server.Api.csproj" />
    <ProjectReference Include="..\Tgstation.Server.Host.Common\Tgstation.Server.Host.Common.csproj" />
    <ProjectReference Include="..\Tgstation.Server.Shared\Tgstation.Server.Shared.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Content Remove="ClientApp\**\*.json" />
    <None Include="ClientApp\**\*.json" />
    <ClientApp Include="ClientApp\src\**\*;ClientApp\public\**\*;ClientApp\tsconfig.json;ClientApp\package.json;ClientApp\package-lock.json" />
    <AdditionalFiles Include="../../build/uac_elevation_manifest.xml" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="appsettings.yml" />
  </ItemGroup>

  <ItemGroup>
    <Content Update="appsettings.yml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <ItemGroup>
    <Folder Include="wwwroot\" />
  </ItemGroup>
</Project>
