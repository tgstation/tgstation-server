using System;
using System.Collections.Generic;
using TGS.Server.Components;

namespace TGS.Server.Chat.Commands
{
	/// <summary>
	/// <see cref="ChatCommand"/>s generated by DreamDaemon via the API
	/// </summary>
	sealed class GameInteropChatCommand : ChatCommand
	{
		/// <summary>
		/// The help text for the <see cref="GameInteropChatCommand"/>
		/// </summary>
		readonly string HelpText;

		/// <summary>
		/// Construct a <see cref="GameInteropChatCommand"/>
		/// </summary>
		/// <param name="name">The invocation of the <see cref="GameInteropChatCommand"/></param>
		/// <param name="helpText">The help text of the <see cref="GameInteropChatCommand"/></param>
		/// <param name="adminOnly">If set to <see langword="true"/>, the <see cref="GameInteropChatCommand"/> cannot be invoked by a non-admin or outside an admin chat channel</param>
		/// <param name="requiredParameters">The number of parameters the <see cref="GameInteropChatCommand"/> requires</param>
		public GameInteropChatCommand(string name, string helpText, bool adminOnly, int requiredParameters)
		{
			Keyword = name;
			RequiresAdmin = adminOnly;
			HelpText = helpText;
			RequiredParameters = requiredParameters;
		}

		/// <inheritdoc />
		public override string GetHelpText()
		{
			return HelpText;
		}

		/// <inheritdoc />
		protected override ExitCode Run(IList<string> parameters)
		{
			var res = CommandInfo.Interop.SendCommand(InteropCommand.CustomCommand, new List<string> { String.Format("{0};sender={1};custom={2}", Keyword, CommandInfo.Speaker, InteropManager.SanitizeTopicString(String.Join(" ", parameters))) });
			if (res != "SUCCESS" && !String.IsNullOrWhiteSpace(res))
				OutputProc(res);
			return ExitCode.Normal;
		}
	}
}
