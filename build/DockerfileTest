# THIS FILE MUST BE KEPT IN SYNC WITH Dockerfile!
FROM mcr.microsoft.com/dotnet/sdk:6.0-bookworm-slim

# install node and npm
# replace shell with bash so we can source files
RUN curl --silent -o- https://raw.githubusercontent.com/creationix/nvm/v0.39.1/install.sh | sh

ENV NODE_VERSION 20.5.1

ENV NVM_DIR /root/.nvm
ENV NODE_PATH $NVM_DIR/v$NODE_VERSION/lib/node_modules
ENV PATH $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH

RUN . $NVM_DIR/nvm.sh \
	&& nvm install $NODE_VERSION \
	&& nvm use $NODE_VERSION \
	&& dpkg --add-architecture i386 \
	&& apt-get update \
	&& apt-get install -y \
		libc6-i386 \
		libstdc++6:i386 \
		gcc-multilib \
		gdb \
		dos2unix \
	&& rm -rf /var/lib/apt/lists/* \
	&& npm install -g npm

#You may wonder why this needs to be in a seperate step. I don't know... It just works(tm)
RUN npm install -g yarn

# Build web control panel
WORKDIR /repo/build

COPY build/Common.props Common.props
COPY build/NugetCommon.props NugetCommon.props
COPY build/Version.props Version.props
COPY build/ControlPanelVersion.props ControlPanelVersion.props
COPY build/SrcCommon.props SrcCommon.props

WORKDIR /repo/src/Tgstation.Server.Host

COPY src/Tgstation.Server.Host/Tgstation.Server.Host.csproj ./

# I cant figure out how to run npm as non root so eh
RUN dotnet msbuild -target:NpmBuild

WORKDIR /repo

# Final copy for building
COPY . .

RUN dos2unix tests/Tgstation.Server.Tests/test.sh \
	&& chmod +x tests/Tgstation.Server.Tests/test.sh \
	&& dos2unix build/tgs.docker.sh \
	&& dotnet build -c ReleaseNoWindows

ENV TGS_TEST_DATABASE_TYPE Sqlite
ENV TGS_TEST_CONNECTION_STRING Data Source=/tgs.sqlite3;Mode=ReadWriteCreate

VOLUME [ "/TestResults" ]

ENTRYPOINT [ "dotnet", "test", "--no-build", "-c", "ReleaseNoWindows", "--logger", "GitHubActions;summary.includePassedTests=true;summary.includeSkippedTests=true", "--settings", "build/ci.runsettings", "--results-directory", "/TestResults" ]
