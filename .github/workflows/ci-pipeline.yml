# THE MAIN BIG CHUNGUS
# Does CI on push/PR/cron. Deployments on push when triggered
# - Validates Documentation
# - Builds C# and DMAPI
# - Tests everything on massive matrix
# - Packages
# - Tests package installs/services/uninstalls
# - Properly versions everything based on build/Version.props
# - Checks commit tags for deployment intents
# - Deploys DreamMaker API zip [DMDeploy] (dev/master)
# - Deploys Nuget Packages [NugetDeploy] (dev/master)
# - Deploys HTTP API swagger.json [APIDeploy] (dev/master)
# - Deploys tgstation-server [TGSDeploy] (master)
#   - GitHub Releases: https://github.com/tgstation/tgstation-server/releases
#   - Docker: https://hub.docker.com/r/tgstation/server
#   - apt repo: https://github.com/tgstation/tgstation-ppa
#   - winget: https://github.com/microsoft/winget-pkgs/tree/master/manifests/t/Tgstation/Server
name: 'CI Pipeline'

on:
  schedule:
    - cron: 0 23 * * *
  push:
    branches:
    - dev
    - master
    - V6
  pull_request:
    branches:
    - dev
    - master
    - V6
  pull_request_target:
    types: [ opened, reopened, labeled, synchronize ]
    branches:
    - dev
    - master
    - V6

env:
  TGS_DOTNET_VERSION: 8
  OD_DOTNET_VERSION: 7
  TGS_DOTNET_QUALITY: ga
  TGS_TEST_GITHUB_TOKEN: ${{ secrets.LIVE_TESTS_TOKEN }}
  TGS_RELEASE_NOTES_TOKEN: ${{ secrets.DEV_PUSH_TOKEN }}
  WINGET_PUSH_TOKEN: ${{ secrets.DEV_PUSH_TOKEN }}
  PACKAGING_PRIVATE_KEY_PASSPHRASE: ${{ secrets.PACKAGING_PRIVATE_KEY_PASSPHRASE }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

concurrency:
  group: "ci-${{ github.head_ref || github.run_id }}-${{ github.event_name }}"
  cancel-in-progress: true

jobs:
  build-msi:
    name: Build Windows Installer .exe
    runs-on: windows-latest
    steps:
    - name: Install winget
      uses: Cyberboss/install-winget@v1
      with:
        GITHUB_TOKEN: ${{ env.WINGET_PUSH_TOKEN }}

    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '${{ env.TGS_DOTNET_VERSION }}.0.x'
        dotnet-quality: ${{ env.TGS_DOTNET_QUALITY }}

    - name: Checkout (Branch)
      uses: actions/checkout@v3
      if: github.event_name == 'push' || github.event_name == 'schedule'

    - name: Checkout (PR Merge)
      uses: actions/checkout@v3
      if: github.event_name != 'push' && github.event_name != 'schedule'
      with:
        ref: "refs/pull/${{ github.event.number }}/merge"

    - name: Restore Wix dotnet Tool
      run: |
        cd build/package/winget
        dotnet tool restore

    - name: Validate winget Manifest
      run: winget validate --manifest build/package/winget/manifest

    - name: Restore
      run: dotnet restore

    - name: Build Host
      run: dotnet build -c Release src/Tgstation.Server.Host/Tgstation.Server.Host.csproj

    - name: Build Service
      run: dotnet build -c Release src/Tgstation.Server.Host.Service/Tgstation.Server.Host.Service.csproj

    - name: Prepare Artifacts
      shell: powershell
      run: build/package/winget/prepare_installer_input_artifacts.ps1

    - name: Build Installer .exe
      run: |
        cd build/package/winget/Tgstation.Server.Host.Service.Wix.Bundle
        dotnet build -c Release

    - name: Install Code Signing Certificate
      shell: powershell
      run: |
        $pfxBytes = [convert]::FromBase64String("${{ secrets.CODE_SIGNING_BASE64 }}")
        [IO.File]::WriteAllBytes("tg_codesigning.pfx", $pfxBytes)
        $certPassword = ConvertTo-SecureString -String "${{ secrets.CODE_SIGNING_PASSWORD }}" -Force -AsPlainText
        Import-PfxCertificate -FilePath tg_codesigning.pfx -Cert Cert:\CurrentUser\My -Password $certPassword
        rm tg_codesigning.pfx

    - name: Sign Installer .exe for Testing # https://wixtoolset.org/docs/tools/signing/
      shell: powershell
      run: |
        cd build/package/winget
        dotnet wix burn detach Tgstation.Server.Host.Service.Wix.Bundle/bin/Release/tgstation-server-installer.exe -engine burnengine.exe
        Set-AuthenticodeSignature burnengine.exe -Certificate (Get-ChildItem Cert:\CurrentUser\My | Where-Object { $_.Thumbprint -eq "${{ vars.CODE_SIGNING_THUMBPRINT }}" }) -TimestampServer "http://timestamp.digicert.com"
        dotnet wix burn reattach Tgstation.Server.Host.Service.Wix.Bundle/bin/Release/tgstation-server-installer.exe -engine burnengine.exe -o test-installer.exe
        Set-AuthenticodeSignature test-installer.exe -Certificate (Get-ChildItem Cert:\CurrentUser\My | Where-Object { $_.Thumbprint -eq "${{ vars.CODE_SIGNING_THUMBPRINT }}" }) -TimestampServer "http://timestamp.digicert.com"

    - name: Test Install # Sanity checks the .deps.json exists, which the installation is broken without
      shell: powershell  # If it's missing, I found that <PrivateAssets> in <PackageReference> elements were the problem
      run: |
        mkdir C:/ProgramData/tgstation-server
        cp build/package/appsettings.GitHub.yml C:/ProgramData/tgstation-server/appsettings.Production.yml
        $file = [System.IO.Path]::GetFullPath("build/package/winget/test-installer.exe")
        $log = [System.IO.Path]::GetFullPath("install.log")
        $procMain = Start-Process -FilePath $file "/install /silent /log `"$log`"" -NoNewWindow -PassThru -Wait
        if (Test-Path -Path $log -PathType Leaf) {
          Get-Content $log
        }
        $installCode = $procMain.ExitCode
        if($installCode -ne 0) {
          Write-Host "ERROR INSTALLER EXIT CODE $installCode"
          exit 3
        }
        if (-Not (Test-Path -Path "C:/Program Files (x86)/tgstation-server/lib/Default/Tgstation.Server.Host.deps.json" -PathType Leaf)) {
          exit 2
        }
        if (-Not (Test-Path -Path "C:/ProgramData/tgstation-server/appsettings.yml" -PathType Leaf)) {
          exit 4
        }

    - name: Test Service
      shell: powershell
      run: |
        $service=Get-Service -Name tgstation-server -ErrorAction SilentlyContinue
        if ($service.Length -eq 0) {
          exit 3
        }
        if ($service[0].Status -ne "Running") {
          exit 4
        }

    - name: Test Uninstall # Sanity checks the .deps.json exists, which the installation is broken without
      shell: powershell
      run: |
        $file = [System.IO.Path]::GetFullPath("build/package/winget/test-installer.exe")
        $log = [System.IO.Path]::GetFullPath("uninstall.log")
        $procMain = Start-Process -FilePath $file "/uninstall /silent /log `"$log`"" -NoNewWindow -PassThru -Wait
        if (Test-Path -Path $log -PathType Leaf) {
          Get-Content $log
        }
        $installCode = $procMain.ExitCode
        if($installCode -ne 0) {
          Write-Host "ERROR INSTALLER EXIT CODE $installCode"
          exit 3
        }
        $service=Get-Service -Name tgstation-server -ErrorAction SilentlyContinue
        if ($service.Length -gt 0) {
          echo $service
          exit 2
        }

    - name: Upload Unsigned Installer .exe
      uses: actions/upload-artifact@v3
      with:
        name: packaging-preview-windows
        path: build/package/winget/Tgstation.Server.Host.Service.Wix.Bundle/bin/Release/tgstation-server-installer.exe
